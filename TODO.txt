TODO file

Idea: have the user put a plus sign at the start of any line of the
name of the file they wish to delete. Write a second script that goes
through the dup_report.txt file and deletes all files with a plus
sign in front. It should warn if asking to delete all the files or
not all of them.

Have a command line option to have a minimum size file that gets
listed.

Allow user to specify the working directory on the command line, this
would allow the program to be used more like a normal binary instead
of having to be in the same directory we are working in.

Create tests?

Restructure to have dup_file_funcs.pm live under ~/lib or
/usr/local/lib and dup_file_find.pl and dup_file_del.pl to live under
~/bin or /usr/local/bin

Add option to dup_file_find.pl to create an output file where all
files are already marked for deletion. This would allow one to more
quickly delete a lot of files if you are confidend they can be
deleted.

Consider using the sha256 unix tool instead of the sha algorithm built
into perl. It might be faster. Or maybe using a smaller hash say 128.

Add option to dup_file_del.pl to delete empty folders if the tool
deleted all the files within.

Make dup_file_del.pl ignore files if they have already been
deleted. This would allow the user to slowly work their way through
the report file deleting as they make changes.

Figure out how to handle symlinks and hardlinks correctly.

DONE Re-order the output so the duplicates are near the files to keep, this
makes it easier to read and decide what to keep rather than scrolling
up and down.

DONE At the bottom, with the total size that can be freed, also list how
many files can be deleted.

DONE sort the output by filesize. It is about saving disk space afterall.

DONE Create the dup_file_del.pl program. This program reads in the output
file of dup_file_find and, after the user has modified it, deletes the
files the user has selected.
